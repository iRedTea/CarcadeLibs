
plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("java")
    id("maven-publish")
}

group = 'me.redtea'
version = '1.2.1'

repositories {
    mavenCentral()
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven {url = uri("https://maven.husk.pro/repository/maven-releases/") }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly group: 'me.clip', name: 'placeholderapi', version: '2.11.1'

    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.1.0'
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'me.mattstudios.utils:matt-framework:1.4.6'
    implementation 'dev.triumphteam:triumph-gui:3.1.3'
    implementation group: 'com.github.cryptomorin', name: 'XSeries', version: '8.6.1'
    implementation("pro.husk:mysql:1.4.1")
    implementation("mysql:mysql-connector-java:8.0.30")

}



def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}



publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = 'com.github.itzRedTea'
            artifactId = 'me.redtea.carcadelibs'
            version = this.version

        }
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
shadowJar {
    //Storage based relocations
    /*relocate("com.google.inject", "com.google.inject")
    relocate("org.projectlombok:lombok:1.18.24", "org.projectlombok")
    relocate("me.mattstudios.utils", "me.mattstudios.utils")
    relocate("dev.triumphteam.gui", "dev.triumphteam.gui")
    relocate("com.github.cryptomorin", "com.github.cryptomorin")

     */
}
artifacts {
    archives(shadowJar)
}


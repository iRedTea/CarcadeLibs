
plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("java")
    id("maven-publish")
}

group = 'me.redtea'
version = '1.2.2'

repositories {
    mavenCentral()
    maven {
        url = uri("https://papermc.io/repo/repository/maven-public/")
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven {url = uri("https://maven.husk.pro/repository/maven-releases/") }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi'
    }

    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT")
    compileOnly group: 'me.clip', name: 'placeholderapi', version: '2.11.1'

    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:5.1.0'
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'me.mattstudios.utils:matt-framework:1.4.6'
    implementation 'dev.triumphteam:triumph-gui:3.1.3'
    implementation group: 'com.github.cryptomorin', name: 'XSeries', version: '8.6.1'
    implementation("pro.husk:mysql:1.4.1")
    implementation("mysql:mysql-connector-java:8.0.30")

    implementation "net.kyori:adventure-text-minimessage:4.11.0"

    implementation('com.github.mfarsikov:kotlite-core:0.9.0') //(2)
    implementation('org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0') //(3)
    implementation('org.xerial:sqlite-jdbc:3.39.3.0') //(4)

}

/*
dependency:
kotlin("kapt") version "1.4.31" //(1)
kotlin("plugin.serialization") version "1.4.31"

kapt("com.github.mfarsikov:kotlite-kapt:0.5.0") //(5)

kapt {
    arguments {
        arg("kotlite.db.qualifiedName", "my.pkg.DB") //(6)
    }
}
 */


def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}



publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = 'com.github.itzRedTea'
            artifactId = 'me.redtea.carcadelibs'
            version = this.version

        }
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
shadowJar {
    //Storage based relocations
    /*relocate("com.google.inject", "com.google.inject")
    relocate("org.projectlombok:lombok:1.18.24", "org.projectlombok")
    relocate("me.mattstudios.utils", "me.mattstudios.utils")
    relocate("dev.triumphteam.gui", "dev.triumphteam.gui")
    relocate("com.github.cryptomorin", "com.github.cryptomorin")

     */
}
artifacts {
    archives(shadowJar)
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(16))
}

